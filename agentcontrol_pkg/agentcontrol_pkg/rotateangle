from irobot_create_msgs.action import RotateAngle

self.rotation_client = ActionClient(self,RotateAngle, '/'+self.agent+'/rotate_angle')

rotate_goal = RotateAngle.Goal()
rotate_goal.angle = theta
rotate_goal.max_rotation_speed = 0.5
self.rotation_client.wait_for_server()
self.rotation_client.send_goal(rotate_goal)
#self._send_goal_future = self.rotation_client.send_goal_asynch(rotate_goal)
 self._send_goal_future.add_done_callback(self.goal_response_callback)


    def goal_response_callback(self, future):
        '''
        A callback that is executed when the future is complete.
        The future is completed when an action server accepts or rejects the goal request.
        Since there will be no result, we can check and determine if the goal was rejected
        and return early. 
        '''
        print('Checking if goal was accepted or rejected...')
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().info('Goal rejected :(')
            return

        self.get_logger().info('Goal accepted :)')
        '''
        We can request to see if the goal request was accepted or rejected.
        Future will complete when the result is ready.
        This step is registering a callback (similar to that of the goal response).
        '''
        self._get_result_future = goal_handle.get_result_async()
        self._get_result_future.add_done_callback(self.get_result_callback)

    def get_result_callback(self, future):
        '''
        Here, we are logging the result sequence.
        '''
        result = future.result().result
        self.get_logger().info('Result: {0}'.format(result))
        '''
        This shuts down the node.
        '''        
        print('Shutting down rotate action client node.')
        rclpy.shutdown()
